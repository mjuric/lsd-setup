#!/bin/bash

# Find our location
# Try #1 (if we were called from var/pkg/scripts)
DEST="$(dirname $0)/../../.."
DEST="$(cd $DEST && pwd)"
if [ ! -f "$DEST/.lsdpkgroot" ]; then
	# Try #2 (if we were called from bin)
	DEST="$(dirname $0)/.."
	DEST="$(cd $DEST && pwd)"
	if [ ! -f "$DEST/.lsdpkgroot" ]; then
		echo "Could not deduce the root of LSD package installation; your setup is likely corrupted."
		exit -1
	fi
fi

cd $DEST

if [ ! -f "$DEST/var/pkg/etc/remote" ]; then
	echo "Could not load the remote package repository URL ($DEST/var/pkg/etc/remote)."
	exit -1
fi
export REMOTE=`head -1 "$DEST/var/pkg/etc/remote"`

download ()
{
	# Download
	TARGET=${1:-dlall}
	(cd var/pkg/sources && make -f ../scripts/Makefile $TARGET DOWNLOAD=1) || exit -1
}

build ()
{
	# Build
	TARGET=${1:-all}
	(cd var/pkg/installed && make -f ../scripts/Makefile $TARGET) || { echo "Error while building LSD packages. More details in $DEST/var/pkg/log directory."; exit -1; }
	(cd var/pkg/installed && make -f ../scripts/Makefile gc) || { echo "Error while building LSD packages. More details in $DEST/var/pkg/log directory."; exit -1; }
	
	if [ $TARGET == "all" ]; then
		cat <<EOF
Congratulations, you have successfully built LSD. Source the following shell
scripts:

	source $DEST/environment.sh
	source $DEST/lsd_environment.sh

to set up the paths (and in that order). Having done that, run:

	lsd-query --version

to verify everything went well.
EOF
	fi
}

rebuild()
{
	if [ "x$1" == "x" ]; then
		echo "Specify the target to rebuild. Use 'all' to rebuild everything."
		exit -1
	fi

	TARGET=$1
	if [ x"$TARGET" == x"all" ]; then
		(cd var/pkg/sources && make -f ../scripts/Makefile clean)
	else
		rm -f "var/pkg/installed/$TARGET"
	fi

	build $TARGET
}

update()
{
	# Download the (potentially updated) packaging files
	TARGET=${1:-all}
	( cd $DEST/var/pkg/scripts &&
		wget -q "$REMOTE/scripts/Makefile" -O tmp && mv tmp Makefile && \
		wget -q "$REMOTE/scripts/lsd-pkg"  -O tmp && mv tmp lsd-pkg && \
		chmod +x lsd-pkg \
	) || { echo "Failed to download packaging scripts."; exit -1; }
	
	# download and build
	download $TARGET
	build $TARGET
}

usage ()
{
	echo "Usage: $0 <download|build|update|rebuild>"
	exit -1
}

if [ x"$1" == x"download" ]; then
	download $2
elif [ x"$1" == x"build" ]; then
	build $2
elif [ x"$1" == x"update" ]; then
	update $2
elif [ x"$1" == x"rebuild" ]; then
	rebuild $2
else
	usage
fi
